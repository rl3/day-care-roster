# Multi-stage Dockerfile f√ºr Production Deployment
FROM node:18-alpine as frontend-build

WORKDIR /app/frontend

# Frontend Dependencies installieren
COPY frontend/package*.json ./
RUN npm ci

# Frontend Source kopieren und builden
COPY frontend/ ./
RUN npm run build

# Python Backend Stage
FROM python:3.11-slim

WORKDIR /app

# System Dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Python Dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Backend Source kopieren
COPY backend/ ./

# Frontend Build vom ersten Stage kopieren
COPY --from=frontend-build /app/frontend/dist ./static

# Port freigeben
EXPOSE 8000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Start command
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]